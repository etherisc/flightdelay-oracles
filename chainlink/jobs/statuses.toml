type                = "directrequest"
schemaVersion       = 1
name                = "Get FlightStatuses"
contractAddress     = "0xd006d393b49f89677722Ed04A26Ab83C74B1aC0e"
# Optional externalJobID: Automatically generated if unspecified
# externalJobID       = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F02"
observationSource   = """

// First, we parse the request log and the CBOR payload inside of it
decode_log [
type = "ethabidecodelog"
abi = "OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
data = "$(jobRun.logData)"
topics = "$(jobRun.logTopics)"
]

// The result of the following element is a map e.g. {carrier: "LH", flightNumber: "117"}
decode_cbor [
type = "cborparse"
data = "$(decode_log.data)"
]


// Then, we use the decoded request parameters to make an HTTP fetch
fetch [
type = "http"
method = GET
requestData = "{\\"carrier\\": $(decode_cbor.carrier), \\"flightNumber\\": $(decode_cbor.flightNumber), \\"year\\": $(decode_cbor.year), \\"month\\": $(decode_cbor.month), \\"day\\": $(decode_cbor.day)}"
url = "https://fs-api.etherisc.com/api/v1/status-oracle"
]


// From the fetch result, we parse out the individual elements (rating statistics)
status [type= "jsonparse" data = "$(fetch)" path = "status"]
delay [type = "jsonparse" data = "$(fetch)" path = "delay" ]


// Finally, we send a response on-chain.
 // The abi is the abi of the fulfill function in the receiving contract.
encode_response [
type = "ethabiencode"
abi = "(bytes32 requestId, uint256 status, uint256 delay)"
data= "{\\"requestId\\": $(decode_log.requestId), \\"status\\": $(status), \\"delay\\": $(delay)}"
]

encode_tx [
type = "ethabiencode"
abi = "fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
data = "{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_response)}"
]

submit_tx [
type = "ethtx"
to = "0xd006d393b49f89677722Ed04A26Ab83C74B1aC0e"
data = "$(encode_tx)"
]

// Dependency graph

decode_log -> decode_cbor -> fetch

fetch -> status -> encode_response
fetch -> delay -> encode_response

encode_response -> encode_tx -> submit_tx

"""

